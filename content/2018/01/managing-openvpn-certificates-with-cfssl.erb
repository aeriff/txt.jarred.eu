---
title: Managing OpenVPN certificates with cfssl
kind: article
created_at: 2018-01-08
excerpt: Adventures in switching to cfssl for a distro that uses libressl (which does not play nicely with easy-rsa).
---

<p class="measure copy lh-copy">
I run an instance of OpenVPN for use when I'm out and about on public WiFi, eg. at cafes or airports. Until recently, it ran on a small VPS with Arch Linux x86. Given the deprecation of the x86 architecture by Arch and that I don't run anything of much value there, I decided to give <a href="http://voidlinux.eu" class="link black underline">Void Linux</a> a spin (mostly because I really like <a href="http://smarden.org/runit/" class="link black underline">runit</a>, which is the init system in Void). As Void uses libressl which is <a href="https://github.com/OpenVPN/easy-rsa/issues/76" class="link black underline">known to not play nicely with easy-rsa</a>, I decided to try managing the CA and client certificates with <a href="https://github.com/cloudflare/cfssl" class="link black underline">cfssl</a>.
</p>

<p class="measure copy lh-copy">
As a leading caveat: Proper security around key handling is an exercise left to the reader, this is merely a guide to be able to replace the basic functionality of <code class="bg-near-white pa1">easy-rsa</code> with <code class="bg-near-white pa1">cfssl</code>. Operations other than issuing keys are also left up to the reader.
</p>

<p class="measure copy lh-copy">
As cfssl expects JSON files for configuration, we'll take care of that first (modify as needed, eg. common names and country/organisation values):
</p>


<pre class="measure copy lh-copy overflow-auto code pa2 bg-near-white black">
mkdir -p vpn/{config,certs}

<span class="black-50"># vpn/config/csr.json</span>
{
    "cn": "My VPN CA",
    "key": {
        "algo": "rsa",
        "size": 2048
    },
    "names": [
        {
            "C": "DE",
            "O": "OpenVPN"
        }
    ]
}

<span class="black-50"># vpn/config/ca.json</span>
{
    "signing": {
        "profiles": {
            "server": {
                "expiry": "43800h",
                "usages": [
                    "digital signature",
                    "key encipherment",
                    "server auth"
                ]
            },
            "client": {
                "expiry": "43800h",
                "usages": [
                    "signing",
                    "client auth"
                ]
            }
        }
    }
}
</pre>

<p class="measure copy lh-copy">
You'll notice we're using TLS key usage extensions as outlined in <a href="https://www.ietf.org/rfc/rfc3280.txt" class="link black underline">RFC3280</a> to take advantage of things like the OpenVPN client directive <code class="pa1 bg-near-white">remote-cert-tls server</code>.
</p>

<p class="measure copy lh-copy">
Now we can initialise the CA and generate certificates for the server:
</p>

<pre class="measure copy lh-copy overflow-auto code pa2 bg-near-white black">
cfssl genkey -initca vpn/config/csr.json | \
  cfssljson -bare vpn/certs/ca

cfssl gencert -ca vpn/certs/ca.pem \
  -ca-key vpn/certs/ca-key.pem \
  -config=vpn/config/ca.json \
  -profile="server" \
  -hostname="server" \
  vpn/config/csr.json | \
    cfssljson -bare vpn/certs/server
</pre>

<p class="measure copy lh-copy">
Now we can generate certificates for the client. The process is identical to above for the server certificate, only substituting in "client" where appropriate to use the different signing profile. Modify the value of CLIENT_NAME as necessary.
</p>

<pre class="measure copy lh-copy overflow-auto code pa2 bg-near-white black">
export CLIENT_NAME="client1"
cfssl gencert -ca vpn/certs/ca.pem \
  -ca-key vpn/certs/ca-key.pem \
  -config=vpn/config/ca.json \
  -profile="client" \
  -hostname="${CLIENT_NAME}" \
  vpn/config/csr.json | \
    cfssljson -bare "vpn/certs/${CLIENT_NAME}"
</pre>

<p class="measure copy lh-copy">
You should now have the following files for copying to the server: <code class="code bg-near-white pa1">ca.pem</code>, <code class="code bg-near-white pa1">server.pem</code> and <code class="code bg-near-white pa1">server-key.pem</code>, and <code class="code bg-near-white pa1">ca.pem</code>, <code class="code bg-near-white pa1">client1.pem</code> and <code class="code bg-near-white pa1">client1-key.pem</code> for copying to the client.
</p>

<p class="measure copy lh-copy">
Happy VPNing!
</p>
